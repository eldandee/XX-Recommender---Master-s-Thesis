/* tslint:disable */
/* eslint-disable */
/**
 * Movie API
 * API for Movie App
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CastPersonDto
 */
export interface CastPersonDto {
    /**
     * 
     * @type {string}
     * @memberof CastPersonDto
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CastPersonDto
     */
    profilePath?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CastPersonDto
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CastPersonDto
     */
    character?: string | null;
}
/**
 * 
 * @export
 * @interface CastPersonDtoAllOf
 */
export interface CastPersonDtoAllOf {
    /**
     * 
     * @type {string}
     * @memberof CastPersonDtoAllOf
     */
    character?: string | null;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {Array<RatingDtoRequest>}
     * @memberof InlineObject
     */
    ratings?: Array<RatingDtoRequest>;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    ratingId: string;
    /**
     * 
     * @type {number}
     * @memberof InlineObject1
     */
    rating: number;
}
/**
 * 
 * @export
 * @interface ListPaginationResponseDto
 */
export interface ListPaginationResponseDto {
    /**
     * 
     * @type {number}
     * @memberof ListPaginationResponseDto
     */
    totalCount?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ListPaginationResponseDto
     */
    pageNumber?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ListPaginationResponseDto
     */
    pageSize?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ListPaginationResponseDto
     */
    totalPages?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ListPaginationResponseDto
     */
    hasNextPage?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof ListPaginationResponseDto
     */
    hasPrevPage?: boolean | null;
}
/**
 * 
 * @export
 * @interface MessageResponseDto
 */
export interface MessageResponseDto {
    /**
     * 
     * @type {string}
     * @memberof MessageResponseDto
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageResponseDto
     */
    message?: string | null;
}
/**
 * 
 * @export
 * @interface MostPopularMoviesListResponseDto
 */
export interface MostPopularMoviesListResponseDto {
    /**
     * 
     * @type {Array<MovieDto>}
     * @memberof MostPopularMoviesListResponseDto
     */
    items?: Array<MovieDto> | null;
}
/**
 * 
 * @export
 * @interface MovieDetailRatingDto
 */
export interface MovieDetailRatingDto {
    /**
     * 
     * @type {string}
     * @memberof MovieDetailRatingDto
     */
    _id?: string;
    /**
     * 
     * @type {number}
     * @memberof MovieDetailRatingDto
     */
    rating?: number | null;
}
/**
 * 
 * @export
 * @interface MovieDetailResponseDto
 */
export interface MovieDetailResponseDto {
    /**
     * 
     * @type {string}
     * @memberof MovieDetailResponseDto
     */
    movieId?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieDetailResponseDto
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MovieDetailResponseDto
     */
    releaseDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MovieDetailResponseDto
     */
    posterPath?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof MovieDetailResponseDto
     */
    genres?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof MovieDetailResponseDto
     */
    backdropPath?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MovieDetailResponseDto
     */
    overview?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MovieDetailResponseDto
     */
    runtime?: number | null;
    /**
     * 
     * @type {Array<CastPersonDto>}
     * @memberof MovieDetailResponseDto
     */
    cast?: Array<CastPersonDto> | null;
    /**
     * 
     * @type {Array<PersonDto>}
     * @memberof MovieDetailResponseDto
     */
    directors?: Array<PersonDto> | null;
    /**
     * 
     * @type {MovieDetailRatingDto}
     * @memberof MovieDetailResponseDto
     */
    rating?: MovieDetailRatingDto;
}
/**
 * 
 * @export
 * @interface MovieDetailResponseDtoAllOf
 */
export interface MovieDetailResponseDtoAllOf {
    /**
     * 
     * @type {string}
     * @memberof MovieDetailResponseDtoAllOf
     */
    backdropPath?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MovieDetailResponseDtoAllOf
     */
    overview?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MovieDetailResponseDtoAllOf
     */
    runtime?: number | null;
    /**
     * 
     * @type {Array<CastPersonDto>}
     * @memberof MovieDetailResponseDtoAllOf
     */
    cast?: Array<CastPersonDto> | null;
    /**
     * 
     * @type {Array<PersonDto>}
     * @memberof MovieDetailResponseDtoAllOf
     */
    directors?: Array<PersonDto> | null;
    /**
     * 
     * @type {MovieDetailRatingDto}
     * @memberof MovieDetailResponseDtoAllOf
     */
    rating?: MovieDetailRatingDto;
}
/**
 * 
 * @export
 * @interface MovieDto
 */
export interface MovieDto {
    /**
     * 
     * @type {string}
     * @memberof MovieDto
     */
    movieId?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieDto
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MovieDto
     */
    releaseDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MovieDto
     */
    posterPath?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof MovieDto
     */
    genres?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface MoviesListResponseDto
 */
export interface MoviesListResponseDto {
    /**
     * 
     * @type {number}
     * @memberof MoviesListResponseDto
     */
    totalCount?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MoviesListResponseDto
     */
    pageNumber?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MoviesListResponseDto
     */
    pageSize?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MoviesListResponseDto
     */
    totalPages?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof MoviesListResponseDto
     */
    hasNextPage?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof MoviesListResponseDto
     */
    hasPrevPage?: boolean | null;
    /**
     * 
     * @type {Array<MovieDto>}
     * @memberof MoviesListResponseDto
     */
    items?: Array<MovieDto> | null;
}
/**
 * 
 * @export
 * @interface MoviesListResponseDtoAllOf
 */
export interface MoviesListResponseDtoAllOf {
    /**
     * 
     * @type {Array<MovieDto>}
     * @memberof MoviesListResponseDtoAllOf
     */
    items?: Array<MovieDto> | null;
}
/**
 * 
 * @export
 * @interface PersonDto
 */
export interface PersonDto {
    /**
     * 
     * @type {string}
     * @memberof PersonDto
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PersonDto
     */
    profilePath?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PersonDto
     */
    id?: string | null;
}
/**
 * 
 * @export
 * @interface RatingDtoRequest
 */
export interface RatingDtoRequest {
    /**
     * 
     * @type {string}
     * @memberof RatingDtoRequest
     */
    movieId?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RatingDtoRequest
     */
    rating?: number | null;
}
/**
 * 
 * @export
 * @interface RecommendedMoviesListResponseDto
 */
export interface RecommendedMoviesListResponseDto {
    /**
     * 
     * @type {Array<MovieDto>}
     * @memberof RecommendedMoviesListResponseDto
     */
    items?: Array<MovieDto> | null;
}
/**
 * 
 * @export
 * @interface UserRatingDto
 */
export interface UserRatingDto {
    /**
     * 
     * @type {string}
     * @memberof UserRatingDto
     */
    _id?: string;
    /**
     * 
     * @type {number}
     * @memberof UserRatingDto
     */
    rating?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UserRatingDto
     */
    ratedAt?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserRatingDto
     */
    movieId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserRatingDto
     */
    title?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserRatingDto
     */
    releaseDate?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UserRatingDto
     */
    posterPath?: string | null;
}
/**
 * 
 * @export
 * @interface UserRatingsInfoDto
 */
export interface UserRatingsInfoDto {
    /**
     * 
     * @type {number}
     * @memberof UserRatingsInfoDto
     */
    numberOfRatings?: number | null;
}
/**
 * 
 * @export
 * @interface UserRatingsInfoDtoAllOf
 */
export interface UserRatingsInfoDtoAllOf {
    /**
     * 
     * @type {number}
     * @memberof UserRatingsInfoDtoAllOf
     */
    numberOfRatings?: number | null;
}
/**
 * 
 * @export
 * @interface UserRatingsListResponseDto
 */
export interface UserRatingsListResponseDto {
    /**
     * 
     * @type {number}
     * @memberof UserRatingsListResponseDto
     */
    totalCount?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UserRatingsListResponseDto
     */
    pageNumber?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UserRatingsListResponseDto
     */
    pageSize?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UserRatingsListResponseDto
     */
    totalPages?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserRatingsListResponseDto
     */
    hasNextPage?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserRatingsListResponseDto
     */
    hasPrevPage?: boolean | null;
    /**
     * 
     * @type {Array<UserRatingDto>}
     * @memberof UserRatingsListResponseDto
     */
    items?: Array<UserRatingDto> | null;
}
/**
 * 
 * @export
 * @interface UserRatingsListResponseDtoAllOf
 */
export interface UserRatingsListResponseDtoAllOf {
    /**
     * 
     * @type {Array<UserRatingDto>}
     * @memberof UserRatingsListResponseDtoAllOf
     */
    items?: Array<UserRatingDto> | null;
}

/**
 * MoviesApi - axios parameter creator
 * @export
 */
export const MoviesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get movies list.
         * @param {string} title Movie title.
         * @param {number} pageNumber Page number.
         * @param {number} pageSize Page Size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesGet: async (title: string, pageNumber: number, pageSize: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'title' is not null or undefined
            assertParamExists('moviesGet', 'title', title)
            // verify required parameter 'pageNumber' is not null or undefined
            assertParamExists('moviesGet', 'pageNumber', pageNumber)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('moviesGet', 'pageSize', pageSize)
            const localVarPath = `/movies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get most popular movies. - unused but kept for future use
         * @param {number} k 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesMostPopularGet: async (k: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'k' is not null or undefined
            assertParamExists('moviesMostPopularGet', 'k', k)
            const localVarPath = `/movies/most-popular`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (k !== undefined) {
                localVarQueryParameter['k'] = k;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get movie detail by movieId in param.
         * @param {string} movieId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesMovieIdGet: async (movieId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'movieId' is not null or undefined
            assertParamExists('moviesMovieIdGet', 'movieId', movieId)
            const localVarPath = `/movies/{movieId}`
                .replace(`{${"movieId"}}`, encodeURIComponent(String(movieId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MoviesApi - functional programming interface
 * @export
 */
export const MoviesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MoviesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get movies list.
         * @param {string} title Movie title.
         * @param {number} pageNumber Page number.
         * @param {number} pageSize Page Size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesGet(title: string, pageNumber: number, pageSize: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MoviesListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesGet(title, pageNumber, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get most popular movies. - unused but kept for future use
         * @param {number} k 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesMostPopularGet(k: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MostPopularMoviesListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesMostPopularGet(k, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get movie detail by movieId in param.
         * @param {string} movieId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesMovieIdGet(movieId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MovieDetailResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesMovieIdGet(movieId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MoviesApi - factory interface
 * @export
 */
export const MoviesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MoviesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get movies list.
         * @param {string} title Movie title.
         * @param {number} pageNumber Page number.
         * @param {number} pageSize Page Size.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesGet(title: string, pageNumber: number, pageSize: number, options?: any): AxiosPromise<MoviesListResponseDto> {
            return localVarFp.moviesGet(title, pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get most popular movies. - unused but kept for future use
         * @param {number} k 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesMostPopularGet(k: number, options?: any): AxiosPromise<MostPopularMoviesListResponseDto> {
            return localVarFp.moviesMostPopularGet(k, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get movie detail by movieId in param.
         * @param {string} movieId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesMovieIdGet(movieId: string, options?: any): AxiosPromise<MovieDetailResponseDto> {
            return localVarFp.moviesMovieIdGet(movieId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MoviesApi - object-oriented interface
 * @export
 * @class MoviesApi
 * @extends {BaseAPI}
 */
export class MoviesApi extends BaseAPI {
    /**
     * 
     * @summary Get movies list.
     * @param {string} title Movie title.
     * @param {number} pageNumber Page number.
     * @param {number} pageSize Page Size.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public moviesGet(title: string, pageNumber: number, pageSize: number, options?: any) {
        return MoviesApiFp(this.configuration).moviesGet(title, pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get most popular movies. - unused but kept for future use
     * @param {number} k 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public moviesMostPopularGet(k: number, options?: any) {
        return MoviesApiFp(this.configuration).moviesMostPopularGet(k, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get movie detail by movieId in param.
     * @param {string} movieId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public moviesMovieIdGet(movieId: string, options?: any) {
        return MoviesApiFp(this.configuration).moviesMovieIdGet(movieId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RatingsApi - axios parameter creator
 * @export
 */
export const RatingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete all user ratings at once.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsDeleteAllDelete: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ratings/deleteAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get paginated list of ratings sorted by title, ratedAt and releaseDate.
         * @param {string} title Movie title.
         * @param {number} pageNumber Page number.
         * @param {number} pageSize Page Size.
         * @param {'title' | 'ratedAt' | 'releaseDate' | 'rating'} sortBy 
         * @param {'asc' | 'desc'} sortOrder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsGet: async (title: string, pageNumber: number, pageSize: number, sortBy: 'title' | 'ratedAt' | 'releaseDate' | 'rating', sortOrder: 'asc' | 'desc', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'title' is not null or undefined
            assertParamExists('ratingsGet', 'title', title)
            // verify required parameter 'pageNumber' is not null or undefined
            assertParamExists('ratingsGet', 'pageNumber', pageNumber)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('ratingsGet', 'pageSize', pageSize)
            // verify required parameter 'sortBy' is not null or undefined
            assertParamExists('ratingsGet', 'sortBy', sortBy)
            // verify required parameter 'sortOrder' is not null or undefined
            assertParamExists('ratingsGet', 'sortOrder', sortOrder)
            const localVarPath = `/ratings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get info about user ratings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsInfoGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ratings/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rate a movies - both create and update list of ratings
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsPost: async (inlineObject: InlineObject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject' is not null or undefined
            assertParamExists('ratingsPost', 'inlineObject', inlineObject)
            const localVarPath = `/ratings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete single rating by ratingId in param. - unused but kept for future use
         * @param {string} ratingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsRatingIdDelete: async (ratingId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ratingId' is not null or undefined
            assertParamExists('ratingsRatingIdDelete', 'ratingId', ratingId)
            const localVarPath = `/ratings/{ratingId}`
                .replace(`{${"ratingId"}}`, encodeURIComponent(String(ratingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update single rating by ratingId in param and ratingId and rating in body. - unused but kept for future use
         * @param {string} ratingId 
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsRatingIdPut: async (ratingId: string, inlineObject1: InlineObject1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ratingId' is not null or undefined
            assertParamExists('ratingsRatingIdPut', 'ratingId', ratingId)
            // verify required parameter 'inlineObject1' is not null or undefined
            assertParamExists('ratingsRatingIdPut', 'inlineObject1', inlineObject1)
            const localVarPath = `/ratings/{ratingId}`
                .replace(`{${"ratingId"}}`, encodeURIComponent(String(ratingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RatingsApi - functional programming interface
 * @export
 */
export const RatingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RatingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete all user ratings at once.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ratingsDeleteAllDelete(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ratingsDeleteAllDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get paginated list of ratings sorted by title, ratedAt and releaseDate.
         * @param {string} title Movie title.
         * @param {number} pageNumber Page number.
         * @param {number} pageSize Page Size.
         * @param {'title' | 'ratedAt' | 'releaseDate' | 'rating'} sortBy 
         * @param {'asc' | 'desc'} sortOrder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ratingsGet(title: string, pageNumber: number, pageSize: number, sortBy: 'title' | 'ratedAt' | 'releaseDate' | 'rating', sortOrder: 'asc' | 'desc', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRatingsListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ratingsGet(title, pageNumber, pageSize, sortBy, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get info about user ratings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ratingsInfoGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRatingsInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ratingsInfoGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Rate a movies - both create and update list of ratings
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ratingsPost(inlineObject: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ratingsPost(inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete single rating by ratingId in param. - unused but kept for future use
         * @param {string} ratingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ratingsRatingIdDelete(ratingId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ratingsRatingIdDelete(ratingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update single rating by ratingId in param and ratingId and rating in body. - unused but kept for future use
         * @param {string} ratingId 
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ratingsRatingIdPut(ratingId: string, inlineObject1: InlineObject1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ratingsRatingIdPut(ratingId, inlineObject1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RatingsApi - factory interface
 * @export
 */
export const RatingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RatingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete all user ratings at once.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsDeleteAllDelete(options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.ratingsDeleteAllDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get paginated list of ratings sorted by title, ratedAt and releaseDate.
         * @param {string} title Movie title.
         * @param {number} pageNumber Page number.
         * @param {number} pageSize Page Size.
         * @param {'title' | 'ratedAt' | 'releaseDate' | 'rating'} sortBy 
         * @param {'asc' | 'desc'} sortOrder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsGet(title: string, pageNumber: number, pageSize: number, sortBy: 'title' | 'ratedAt' | 'releaseDate' | 'rating', sortOrder: 'asc' | 'desc', options?: any): AxiosPromise<UserRatingsListResponseDto> {
            return localVarFp.ratingsGet(title, pageNumber, pageSize, sortBy, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get info about user ratings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsInfoGet(options?: any): AxiosPromise<UserRatingsInfoDto> {
            return localVarFp.ratingsInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rate a movies - both create and update list of ratings
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsPost(inlineObject: InlineObject, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.ratingsPost(inlineObject, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete single rating by ratingId in param. - unused but kept for future use
         * @param {string} ratingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsRatingIdDelete(ratingId: string, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.ratingsRatingIdDelete(ratingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update single rating by ratingId in param and ratingId and rating in body. - unused but kept for future use
         * @param {string} ratingId 
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingsRatingIdPut(ratingId: string, inlineObject1: InlineObject1, options?: any): AxiosPromise<MessageResponseDto> {
            return localVarFp.ratingsRatingIdPut(ratingId, inlineObject1, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RatingsApi - object-oriented interface
 * @export
 * @class RatingsApi
 * @extends {BaseAPI}
 */
export class RatingsApi extends BaseAPI {
    /**
     * 
     * @summary Delete all user ratings at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingsApi
     */
    public ratingsDeleteAllDelete(options?: any) {
        return RatingsApiFp(this.configuration).ratingsDeleteAllDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get paginated list of ratings sorted by title, ratedAt and releaseDate.
     * @param {string} title Movie title.
     * @param {number} pageNumber Page number.
     * @param {number} pageSize Page Size.
     * @param {'title' | 'ratedAt' | 'releaseDate' | 'rating'} sortBy 
     * @param {'asc' | 'desc'} sortOrder 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingsApi
     */
    public ratingsGet(title: string, pageNumber: number, pageSize: number, sortBy: 'title' | 'ratedAt' | 'releaseDate' | 'rating', sortOrder: 'asc' | 'desc', options?: any) {
        return RatingsApiFp(this.configuration).ratingsGet(title, pageNumber, pageSize, sortBy, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get info about user ratings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingsApi
     */
    public ratingsInfoGet(options?: any) {
        return RatingsApiFp(this.configuration).ratingsInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rate a movies - both create and update list of ratings
     * @param {InlineObject} inlineObject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingsApi
     */
    public ratingsPost(inlineObject: InlineObject, options?: any) {
        return RatingsApiFp(this.configuration).ratingsPost(inlineObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete single rating by ratingId in param. - unused but kept for future use
     * @param {string} ratingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingsApi
     */
    public ratingsRatingIdDelete(ratingId: string, options?: any) {
        return RatingsApiFp(this.configuration).ratingsRatingIdDelete(ratingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update single rating by ratingId in param and ratingId and rating in body. - unused but kept for future use
     * @param {string} ratingId 
     * @param {InlineObject1} inlineObject1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingsApi
     */
    public ratingsRatingIdPut(ratingId: string, inlineObject1: InlineObject1, options?: any) {
        return RatingsApiFp(this.configuration).ratingsRatingIdPut(ratingId, inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RecommendationsApi - axios parameter creator
 * @export
 */
export const RecommendationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get list of recommended movies
         * @param {number} k Number of movies to return.
         * @param {'cf' | 'cb' | 'hybrid'} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recommendationsGet: async (k: number, type: 'cf' | 'cb' | 'hybrid', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'k' is not null or undefined
            assertParamExists('recommendationsGet', 'k', k)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('recommendationsGet', 'type', type)
            const localVarPath = `/recommendations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (k !== undefined) {
                localVarQueryParameter['k'] = k;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecommendationsApi - functional programming interface
 * @export
 */
export const RecommendationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecommendationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get list of recommended movies
         * @param {number} k Number of movies to return.
         * @param {'cf' | 'cb' | 'hybrid'} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recommendationsGet(k: number, type: 'cf' | 'cb' | 'hybrid', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecommendedMoviesListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recommendationsGet(k, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecommendationsApi - factory interface
 * @export
 */
export const RecommendationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecommendationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get list of recommended movies
         * @param {number} k Number of movies to return.
         * @param {'cf' | 'cb' | 'hybrid'} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recommendationsGet(k: number, type: 'cf' | 'cb' | 'hybrid', options?: any): AxiosPromise<RecommendedMoviesListResponseDto> {
            return localVarFp.recommendationsGet(k, type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecommendationsApi - object-oriented interface
 * @export
 * @class RecommendationsApi
 * @extends {BaseAPI}
 */
export class RecommendationsApi extends BaseAPI {
    /**
     * 
     * @summary Get list of recommended movies
     * @param {number} k Number of movies to return.
     * @param {'cf' | 'cb' | 'hybrid'} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecommendationsApi
     */
    public recommendationsGet(k: number, type: 'cf' | 'cb' | 'hybrid', options?: any) {
        return RecommendationsApiFp(this.configuration).recommendationsGet(k, type, options).then((request) => request(this.axios, this.basePath));
    }
}


